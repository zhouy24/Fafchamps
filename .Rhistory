1+1
library(devtools)
install.packages("devtools")
library(devtools)
install_github("pablobarbera/Rfacebook/Rfacebook")
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="101713700175418", app_secret="e80eae7bfb19fdb05300116b0e4563f2",
extended_permissions = TRUE)
library(devtools)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="101713700175418", app_secret="e80eae7bfb19fdb05300116b0e4563f2",
extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
fb_oauth <- fbOAuth(app_id="101713700175418", app_secret="e80eae7bfb19fdb05300116b0e4563f2",
extended_permissions = TRUE)
head(crime.data)
library(knitr)
library(R2HTML)
library(ggplot2)
library(spatstat)
library(maps)
library(sp)
library(raster)
library(dismo)
library(rgdal)
library(XML)
#Set my wd
setwd("/Users/yuezhou/Desktop/eScience/CommunityWellbeing/Crime")
#Load crime data
crime.data <- read.csv("crime.csv")
crime.data <- crime.data[complete.cases(crime.data), ]
#assign each type of the crime an severity index
clearance.group <- as.vector(crime.data[,7])
clearance.group[clearance.group=="HOMICIDE"] <- 5
clearance.group[clearance.group=="PERSON DOWN/INJURY"] <- 5
clearance.group[clearance.group=="PERSONS - LOST, FOUND, MISSING"] <- 5
clearance.group[clearance.group=="ROBBERY"] <- 5
clearance.group[clearance.group=="ASSAULTS"] <- 5
clearance.group[clearance.group=="LEWD CONDUCT"] <- 4
clearance.group[clearance.group=="FAILURE TO REGISTER (SEX OFFENDER)"] <- 4
clearance.group[clearance.group=="BURGLARY"] <- 4
clearance.group[clearance.group=="TRESPASS"] <- 4
clearance.group[clearance.group=="AUTO THEFTS"] <- 3
clearance.group[clearance.group=="SHOPLIFTING"] <- 3
clearance.group[clearance.group=="PROWLER"] <- 3
clearance.group[clearance.group=="CAR PROWL"] <- 3
clearance.group[clearance.group=="WEAPONS CALLS"] <- 3
clearance.group[clearance.group=="RECKLESS BURNING"] <- 3
clearance.group[clearance.group=="THREATS, HARASSMENT"] <- 3
clearance.group[clearance.group=="DISTURBANCES"] <- 3
clearance.group[clearance.group=="PROSTITUTION"] <- 2
clearance.group[clearance.group=="NARCOTICS COMPLAINTS"] <- 2
clearance.group[clearance.group=="NUISANCE, MISCHIEF"] <- 2
clearance.group[clearance.group=="NUISANCE, MISCHIEF "] <- 2
clearance.group[clearance.group=="ARREST"] <- 2
clearance.group[clearance.group=="HAZARDS"] <- 2
clearance.group[clearance.group=="MENTAL HEALTH"] <- 1
clearance.group[clearance.group=="MISCELLANEOUS MISDEMEANORS"] <- 1
clearance.group[clearance.group=="LIQUOR VIOLATIONS"] <- 1
clearance.group[clearance.group=="OTHER VICE"] <- 1
clearance.group[clearance.group=="VICE CALLS"] <- 1
clearance.group[clearance.group=="PROPERTY DAMAGE"] <- 1
clearance.group[clearance.group=="DRIVE BY (NO INJURY)"] <- 1
clearance.group[clearance.group=="ANIMAL COMPLAINTS"] <- 1
clearance.group[clearance.group=="FRAUD CALLS"] <- 1
clearance.group[clearance.group=="SUSPICIOUS CIRCUMSTANCES"] <- 0
clearance.group[clearance.group=="TRAFFIC RELATED CALLS"] <- 0
clearance.group[clearance.group=="HARBOR CALLS"] <- 0
clearance.group[clearance.group=="ACCIDENT INVESTIGATION"] <-0
clearance.group[clearance.group=="PROPERTY - MISSING, FOUND"] <- 0
clearance.group[clearance.group=="FALSE ALARMS"] <- 0
clearance.group[clearance.group==""] <- 0
clearance.group[clearance.group=="OTHER PROPERTY"] <- 0
clearance.group[clearance.group=="NULL"] <- 0
clearance.group[clearance.group=="BIKE"] <- 0
dim(crime.data)
##### count all the types #####
#Select variables of interest
Seattle.crime <- data.frame(latitude=crime.data$Latitude, longitude=crime.data$Longitude, event=clearance.group)
tract <- shapefile('/Users/YueZhou/Desktop/eScience/CommunityWellbeing/Crime/Seattle_Neighborhoods/Seattle_Neighborhoods.shx')
head(tract)
tract1 <- spTransform(x=tract, CRSobj=CRS("+proj=longlat +datum=WGS84"))
Seattle.crime1 <- SpatialPointsDataFrame(coords=Seattle.crime[ , c("longitude", "latitude")],
data = data.frame(Seattle.crime[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
class(Seattle.crime1)
class(Seattle.crime1$longitude)
Seattle.crime1.tract <- over(x=Seattle.crime1, y=tract1, fn = NULL)
Seattle.crime1@data <- data.frame(Seattle.crime1@data, Seattle.crime1.tract)
Seattle.crime1@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
hom_tract <- aggregate(formula=count~S_HOOD, data=Seattle.crime1@data, FUN=length)
#Seattle.crime <- data.frame(latitude=crime.data$Latitude, longitude=crime.data$Longitude, event=clearance.group)
tract <- shapefile('/Users/YueZhou/Desktop/eScience/Community/Crime/Seattle_Neighborhoods/Seattle_Neighborhoods.shx')
head(tract)
tract1 <- spTransform(x=tract, CRSobj=CRS("+proj=longlat +datum=WGS84"))
#write a function that aggregate each types of crime in different neighborhoods
count <- function(i){
type <- Seattle.crime[clearance.group == i,]
Seattle.crime1 <- SpatialPointsDataFrame(coords=type[ , c("longitude", "latitude")],
data = data.frame(type[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
Seattle.crime1.tract <- over(x=Seattle.crime1, y=tract1, fn = NULL)
Seattle.crime1@data <- data.frame(Seattle.crime1@data, Seattle.crime1.tract)
Seattle.crime1@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
type_tract <- aggregate(formula=count~S_HOOD, data=Seattle.crime1@data, FUN=length)
return(type_tract)
(type_tract)
}
count.type0 <- count(0)
count.type1 <- count(1)
count.type2 <- count(2)
count.type3 <- count(3)
count.type4 <- count(4)
count.type5 <- count(5)
for (i in 1 : hood_number){
if (count.type1[i] > count.type2[i]){
return(hood[i])
}
}
head(count.type5)
head(count.type4)
hood <- as.matrix(hom_tract$S_HOOD)
hood_number <- dim(hood)[1]
chart <- matrix(0, hood_number, 7)
for (i in 1 : hood_number){
name <- hood[i]
if (length(count.type0[count.type0$S_HOOD == name, 2]) != 0 ){
chart[i, 1] <- count.type0[count.type0$S_HOOD == name, 2]
}
if (length(count.type1[count.type1$S_HOOD == name, 2]) != 0 ){
chart[i, 2] <- count.type1[count.type1$S_HOOD == name, 2]
}
if (length(count.type2[count.type2$S_HOOD == name, 2]) != 0 ){
chart[i, 3] <- count.type2[count.type2$S_HOOD == name, 2]
}
if (length(count.type3[count.type3$S_HOOD == name, 2]) != 0 ){
chart[i, 4] <- count.type3[count.type3$S_HOOD == name, 2]
}
if (length(count.type4[count.type4$S_HOOD == name, 2]) != 0 ){
chart[i, 5] <- count.type4[count.type4$S_HOOD == name, 2]
}
if (length(count.type5[count.type5$S_HOOD == name, 2]) != 0 ){
chart[i, 6] <- count.type5[count.type5$S_HOOD == name, 2]
}
if (length(hom_tract[hom_tract$S_HOOD == name, 2]) != 0 ){
chart[i, 7] <- hom_tract[hom_tract$S_HOOD == name, 2]
}
}
sum(chart[91,])/2
hoodname <- as.vector(hom_tract$S_HOOD)
rownames(chart) <- hoodname
colnames(chart) <- c("Type0 crime", "Type1 crime", "Type2 crime", "Type3 crime", "Type4 crime",
"Type5 crime", "Total crime")
(chart)
write.csv(chart, file = "count_different_types_crime.csv")
level <- matrix(c(0.00, 0.001, 0.002, 0.003, 0.004, 0.005, 0), nrow = 7, ncol = 1, byrow = FALSE)
index <- chart %*% level
crimetypeindex <- cbind(chart, index)
colnames(crimetypeindex)[8] <- "Score"
write.csv(crimetypeindex, file = "count_different_types_crime_score.csv")
dim(level)
dim(chart)
tract <- shapefile('/Users/YueZhou/Desktop/eScience/Community/Crime/WGS84/Neighborhoods.shx')
head(tract)
dim(tract)
tract1 <- spTransform(x=tract, CRSobj=CRS("+proj=longlat +datum=WGS84"))
count <- function(i){
type <- Seattle.crime[clearance.group == i,]
Seattle.crime1 <- SpatialPointsDataFrame(coords=type[ , c("longitude", "latitude")],
data = data.frame(type[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
Seattle.crime1.tract <- over(x=Seattle.crime1, y=tract1, fn = NULL)
Seattle.crime1@data <- data.frame(Seattle.crime1@data, Seattle.crime1.tract)
Seattle.crime1@data$count <- 1
#Aggregate homicides by tract (assuming the column "census_tra" is the unique ID for census tracts)
type_tract <- aggregate(formula=count~S_HOOD, data=Seattle.crime1@data, FUN=length)
return(type_tract)
(type_tract)
}
count.type0 <- count(0)
count.type1 <- count(1)
count.type2 <- count(2)
count.type3 <- count(3)
count.type4 <- count(4)
count.type5 <- count(5)
head(count.type5)
head(count.type4)
apply(chart, 2, mean)
mean_hood <- apply(chart, 1, mean)
head(mean_hood)
hood <- as.matrix(hom_tract$S_HOOD)
hood_number <- dim(hood)[1]
chart <- matrix(0, hood_number, 7)
for (i in 1 : hood_number){
name <- hood[i]
if (length(count.type0[count.type0$S_HOOD == name, 2]) != 0 ){
chart[i, 1] <- count.type0[count.type0$S_HOOD == name, 2]
}
if (length(count.type1[count.type1$S_HOOD == name, 2]) != 0 ){
chart[i, 2] <- count.type1[count.type1$S_HOOD == name, 2]
}
if (length(count.type2[count.type2$S_HOOD == name, 2]) != 0 ){
chart[i, 3] <- count.type2[count.type2$S_HOOD == name, 2]
}
if (length(count.type3[count.type3$S_HOOD == name, 2]) != 0 ){
chart[i, 4] <- count.type3[count.type3$S_HOOD == name, 2]
}
if (length(count.type4[count.type4$S_HOOD == name, 2]) != 0 ){
chart[i, 5] <- count.type4[count.type4$S_HOOD == name, 2]
}
if (length(count.type5[count.type5$S_HOOD == name, 2]) != 0 ){
chart[i, 6] <- count.type5[count.type5$S_HOOD == name, 2]
}
if (length(hom_tract[hom_tract$S_HOOD == name, 2]) != 0 ){
chart[i, 7] <- hom_tract[hom_tract$S_HOOD == name, 2]
}
}
sum(chart[91,])/2
hoodname <- as.vector(hom_tract$S_HOOD)
rownames(chart) <- hoodname
colnames(chart) <- c("Type0 crime", "Type1 crime", "Type2 crime", "Type3 crime", "Type4 crime",
"Type5 crime", "Total crime")
(chart)
write.csv(chart, file = "count_different_types_crime2.csv")
level <- matrix(c(0.00, 0.1, 0.2, 0.3, 0.4, 0.5, 0), nrow = 7, ncol = 1, byrow = FALSE)
index <- chart %*% level
crimetypeindex <- cbind(chart, index)
colnames(crimetypeindex)[8] <- "Score"
write.csv(crimetypeindex, file = "count_different_types_crime2_score.csv")
business.data <- read.csv("My_Neighborhood_Map.csv")
business.data <- business.data[complete.cases(business.data), ]
head(business.data)
city_feature <- as.vector(business.data$City.Feature)
dim(city_feature)
#city_feature[feature = "Parks"] == 0
unique(business.data$City.Feature)
feature_location <- data.frame(latitude = business.data$Latitude,longtitude = business.data$Longitude,
event = city_feature)
feature <- SpatialPointsDataFrame(coords=feature_location[ , c("longtitude", "latitude")],
data = data.frame(feature_location[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
feature.tract <- over(x=feature, y=tract1, fn = NULL)
feature@data <- data.frame(feature@data, feature.tract)
feature@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
feature_tract <- aggregate(formula=count~S_HOOD, data=feature@data, FUN=length)
crimetypeindex
feature_added <- cbind(crimetypeindex, feature_tract)
head(feature_added)
colnames(feature_added)[9] <- "Number of city feature"
plot(feature_added$Score, feature_added$Numberofcityfeature)
events.data <- read.csv("City_Sponsored_Events.csv")
events.data <- events.data[complete.cases(events.data), ]
head(events.data)
gov_event <- as.vector(events.data$Event)
dim(gov_event)
#city_feature[feature = "Parks"] == 0
unique(gov_event)
activity <- data.frame(latitude = events.data$Latitude,longtitude = events.data$Longitude,
event = gov_event)
gov_event <- SpatialPointsDataFrame(coords=activity[ , c("longtitude", "latitude")],
data = data.frame(activity[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
govevent.tract <- over(x=gov_event, y=tract1, fn = NULL)
gov_event@data <- data.frame(gov_event@data, govevent.tract)
gov_event@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
govevent_tract <- aggregate(formula=count~S_HOOD, data=gov_event@data, FUN=length)
head(govevent_tract)
city_event <- matrix(0, hood_number, 1)
for (i in 1 : hood_number){
name <- hood[i]
if (length(govevent_tract[govevent_tract$S_HOOD == name, 2]) != 0 ){
city_event[i, 1] <- govevent_tract[govevent_tract$S_HOOD == name, 2]
}
}
gov_event_added <- cbind(feature_added, city_event)
head(gov_event_added)
colnames(feature_added)[10] <- "Number of City Sponsored Events"
plot(gov_event_added$Score, gov_event_added$city_event)
outreach.data <- read.csv("Public_Outreach_and_Engagement_Events.csv")
outreach.data <- outreach.data[complete.cases(outreach.data), ]
head(outreach.data)
public_event <- as.vector(outreach.data$Event)
dim(public_event)
#city_feature[feature = "Parks"] == 0
unique(public_event)
public_outreach <- data.frame(latitude = outreach.data$Latitude,longtitude = outreach.data$Longitude,
event = public_event)
engagement <- SpatialPointsDataFrame(coords=public_outreach[ , c("longtitude", "latitude")],
data = data.frame(public_outreach[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
engagement.tract <- over(x=engagement, y=tract1, fn = NULL)
engagement@data <- data.frame(engagement@data, engagement.tract)
engagement@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
engagement_tract <- aggregate(formula=count~S_HOOD, data=engagement@data, FUN=length)
head(engagement_tract)
public_engagement <- matrix(0, hood_number, 1)
for (i in 1 : hood_number){
name <- hood[i]
if (length(engagement_tract[engagement_tract$S_HOOD == name, 2]) != 0 ){
public_engagement[i, 1] <- engagement_tract[engagement_tract$S_HOOD == name, 2]
}
}
engagement_added <- cbind(gov_event_added, public_engagement)
head(engagement_added)
colnames(engagement_added)[10] <- "Number of public outreach"
plot(engagement_added$Score, engagement_added$public_engagement)
#####################################################################################
data <- read.csv("Public_Outreach_and_Engagement_Events.csv")
data <- data[complete.cases(data), ]
public_event <- as.vector(data$Event)
dim(public_event)
#city_feature[feature = "Parks"] == 0
unique(public_event)
relation <- function(data, event){
data1 <- data.frame(latitude = data$Latitude,longtitude = data$Longitude,
event = event)
data2 <- SpatialPointsDataFrame(coords=data1[ , c("longtitude", "latitude")],
data = data.frame(data1[, "event"]),
proj4string=CRS("+proj=longlat +datum=WGS84"))
data2.tract <- over(x=data2, y=tract1, fn = NULL)
data2@data <- data.frame(data2@data, data2.tract)
data2@data$count <- 1
#Aggregate crimes by tract (assuming the column "census_tra" is the unique ID for census tracts)
data_tract <- aggregate(formula=count~S_HOOD, data=data2@data, FUN=length)
add <- matrix(0, hood_number, 1)
for (i in 1 : hood_number){
name <- hood[i]
if (length(data_tract[data_tract$S_HOOD == name, 2]) != 0 ){
add[i, 1] <- data_tract[data_tract$S_HOOD == name, 2]
}
}
return(add)
}
relation(data,public_event)
latitude <- data$Latitude
longtitude = data$Longitude
#####################################################################################
data <- read.csv("Electrical_Permits__Older_than_6_years.csv")
data <- data[complete.cases(data), ]
head(data)
interest <- as.vector(data$Category)
dim(public_event)
latitude <- data$Latitude
longtitude <- data$Longitude
relation(data, interest)
#####################################################################################
data <- read.csv("Building_Permits___Current.csv")
head(crime.data)
time <- crime.data$At.Scene.Time
time
time[time == "01/31/2011"] <- 0
time[time == "01/31/2011"]
df[,1]<- as.POSIXct(df[,1],format="%d/%m/%Y %H:%M")
class(time)
as.data.frame(time)
class(time)
as.Date(time, format = "%m/%d/%Y")
head(time)
as.Date(time, format = "%m/%d/%Y")
?as.POSIXct
as.POSIXct(time)
as.character(round(time, "day" ) )
time <- as.Date(time, format = "%m/%d/%Y")
a
as.character(round(time, "day" ) )
event.array <- function(x, interval){
len <- length(interval)
matrix(rep(unclass(x), len), ncol=len)
}
intervals.array <- function(x, intervals){
len <- length(x)
matrix(rep(unclass(intervals), len), nrow=len, byrow=TRUE)
}
a.start <- event.array(start, intervals)
head(time)
interval <- c(2009-06-19, 2009-06-21)
a.start <- event.array(start, intervals)
intervals <- c(2009-06-19, 2009-06-21)
a.start <- event.array(start, intervals)
title: "matrix fafchamps"
output: html_document
---
```{r}
rm(list = ls())
setwd('/Users/yuezhou/Desktop/fafchamps')
library(car)
```
Simulate positions in a two-dimentional space
```{r}
n <- 1000
x <- rnorm(n, mean = 0, sd = 1)
y <- rnorm(n, mean= 0, sd = 1)
trials <- 1000
#compute the n*n matrix of Euclidean distances between individuals
A <- cbind(x, y)
distance <- dist(A)
distance <- as.matrix(distance)
```
Get the relationship between each pair of individual people
```{r}
#create symmetric matrixs A, B and C as constant that times distance to simulate benefit and cost from a relationship
a_0 <- 10
b_0 <- 5
c_0 <- 5
constant <- function(a_0){
a <- rnorm(n*n, mean = a_0, sd = 1)
A <- matrix(a, nrow = n)
for(i in 1:n){
for(j in 1:n){
A[j,i] <- A[i,j]
}
}
return(A)
}
A <- constant(a_0)
B <- constant(b_0)
